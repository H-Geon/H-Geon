# -*- coding: utf-8 -*-
"""Pandas 공부

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1khyIgsvnhiDyjsiaqX6NJi3VLeIqdOh5
"""

import pandas as pd

titanic_df=pd.read_csv('/content/drive/MyDrive/하기싫다/train.csv')

titanic_df.head(3)

print('titanic 변수 type:', type(titanic_df))

print('DataFrame 크기:',titanic_df.shape)

titanic_df.info()

titanic_df.describe()

value_counts=titanic_df['Pclass'].value_counts()
print(value_counts)

titanic_pclass= titanic_df['Pclass']
print(type(titanic_pclass))

titanic_pclass.head()

value_counts=titanic_df['Pclass'].value_counts()
print(type(value_counts))
print(value_counts)

#넘파이 ndarray,리스트, 딕셔너리를 DataFrame으로 변환하기
import numpy as np

col_name1=['col1']
list1=[1,2,3]
array1=np.array(list1)
print('array1 shape:',array1.shape)

#리스트를 이용해 dataframe 생성.
df_list1=pd.DataFrame(list1,columns=col_name1)
print('1차원 리스트로 만든 DataFrame:\n',df_list1)

#넘파이 nd array를 이용해 DataFrame 생성
df_array1=pd.DataFrame(array1,columns=col_name1)
print('1차원 ndarray로 만든 DataFrame:\n',df_array1)

#3개의 칼럼명이 필요
col_name2=['col1','col2','col3']

#2행x3열 형태의 리스트와 ndarray 생성한 뒤 이를 DataFrame으로 변환.
list2=[[1,2,3],
       [11,12,13]]
array2=np.array(list2)
print('array2 shape:',array2.shape)

df_list2=pd.DataFrame(list2,columns=col_name2)
print('2차원 리스트로 만든 Dataframe:\n',df_list2)

df_array2=pd.DataFrame(array2,columns=col_name2)
print('2차원 ndarray로 만든 DataFrame:\n',df_array2)

#Key는 문자열 칼럼명으로 매핑, Value는 리스트형(또는 ndarray)칼럼 데이터로 매핑
dict={'col1':[1,11],'col2':[2,22],'col3':[3,33]}
df_dict=pd.DataFrame(dict)
print('딕셔너리로 만든 DataFrame:\n',df_dict)

#DataFrame을 넘파이 ndarray,리스트, 딕셔너리로 변환하기 
#DataFrame을 ndarray로 변환 value 사용
array3=df_dict.values
print('df_dict.values 타입:',type(array3),'df_dict.value shape:',array3.shape)
print(array3)

#DataFrame을 리스트와 딕셔너리로 변환
#value로 얻은 ndarray에 tolist 호출
#Dataframe을 리스트로 변환
list3=df_dict.values.tolist()
print('df_dict.value.tolist() 타입:',type(list3))
print(list3)

#DataFrmae을 딕셔너리로 변환
dict3=df_dict.to_dict('list')
print('\n df_dict.to_dict() 타입:',type(dict3))
print(dict3)

#DataFrame의 칼럼 데이터 세트 생성과 수정
titanic_df['Age_0']=0
titanic_df.head(3)

#DataFrame의 칼럼 데이터 세트 생성과 수정
titanic_df['Age_0']=0
titanic_df.head(3)

titanic_df['Age_by_10']=titanic_df['Age']*10
titanic_df['Family_No']=titanic_df['SibSp']+titanic_df['Parch']+1
titanic_df.head(3)

titanic_df['Age_by_10']=titanic_df['Age_by_10']+100
titanic_df.head(3)

#DataFrame 삭제 ,drop() 메서드 사용
DataFrame.drop(labels=None,Axis=0,index=none,Columns=None,level=None,inplace=False,errors='riase')

titanic_drop_df=titanic_df.drop('Age_0',axis=1)
titanic_drop_df.head(3)

drop_result=titanic_df.drop(['Age_0','Age_by_10','Family_No'],axis=1,inplace=True)
print('inplace=True로 drop 후 반환된 값:',drop_result)
titanic_df.head(3)

#로우 제거
pd.set_option('display.width',1000)
pd.set_option('display.max_colwidth',15)
print('### before axis 0 drop ###')
print(titanic_df.head(3))

titanic_df.drop([0,1,2],axis=0,inplace=True)
print('### after axis 0 drop ###')
print(titanic_df.head(3))

#원본 DataFrame은유지하고 드롭된 DataFrame을 새롭게 객체 변수로 받고 싶다면 inplace=False로 설정
#원본 DataFrame에 드롭된 결과를 적용할 경우에는 inplace=True를 적용